#!/usr/bin/env python3

import sys
import os
import json
from pathlib import Path
import collections

# with open("/tmp/debug-wrapper.log", "a+") as f:
# 	json.dump({ "argv": sys.argv}, f)
# 	f.write("\n")

print(f"libtool would have invoked inker with {json.dumps(sys.argv[1:])}")

Metadata = collections.namedtuple("Metadata",
    ["linker_flags", "ld_library_paths", "shared_libraries", "static_libraries", "static_library_paths"])

def parse_metadata(libtool_linker_invocation):
	linker_flags = []
	shared_libraries = []
	ld_library_paths = []
	static_libraries = []
	static_library_paths = []
	i = 0
	while i < len(libtool_linker_invocation):
		arg = libtool_linker_invocation[i]
		p = Path(arg)
		if p.is_absolute() and p.suffix == '.so':
			name = p.name
			assert name.startswith("lib")
			name = name[len("lib"):-len(".so")]
			shared_libraries += [name]
			d = p.parent
			assert d.is_dir()
			ld_library_paths += [str(d)]
		elif p.is_absolute() and p.suffix == '.a':
			name = p.name
			assert name.startswith("lib")
			name = name[len("lib"):-len(".a")]
			static_libraries += [name]
			d = p.parent
			assert d.is_dir()
			static_library_paths += [str(d)]
		elif arg.startswith("-l"):
			shared_libraries += [arg[len("-l"):]]
		elif arg.startswith("-L"):
			if arg == "-L":
				i += 1
				arg = libtool_linker_invocation[i]
				p = Path(arg)
				assert p.is_dir()
				ld_library_paths += [str(p)]
			else:
				l = arg[len("-L"):]
				assert Path(l).is_dir()
				ld_library_paths += [l]
		# filter out `-o` (part of makefile var zilpmem_test_LINK )
		elif arg.startswith("-o"):
			if arg == "-o":
				i += 1
		else:
			linker_flags += [arg]
		i += 1
	return Metadata(linker_flags, ld_library_paths, shared_libraries, static_libraries, static_library_paths)

def generate_cargo_config_toml(md):
	rustflags = []
	for flag in md.linker_flags:
		rustflags += ["-C", f"link-arg={flag}"]

	cargoconfig = f"""
	# generated by {Path(sys.argv[0]).name} -- DO NOT EDIT
	[target.x86_64-unknown-linux-gnu]
	rustflags = {json.dumps(rustflags)}
	"""
	return cargoconfig


cargoconfig_path = Path(os.getenv("GENERATE_LINKER_METADATA_PY_CARGOCONFIG"))
assert cargoconfig_path.parent.name == ".cargo"
assert cargoconfig_path.name == "config.toml"

ldpaths_json = Path(os.getenv("GENERATE_LINKER_METADATA_PY_LDMETADATAJSON"))
assert ldpaths_json.parent.is_dir()
assert not ldpaths_json.exists() or ldpaths_json.is_file()

ldpaths_env = Path(os.getenv("GENERATE_LINKER_METADATA_PY_LDPATHSENV"))
assert ldpaths_json.parent.is_dir()
assert not ldpaths_json.exists() or ldpaths_json.is_file()

md = parse_metadata(sys.argv[1:])

with open(ldpaths_json, 'w') as f:
	json.dump(md._asdict(), f)

with open(ldpaths_env, 'w') as f:
	f.write(f'export LD_LIBRARY_PATH="{":".join(md.ld_library_paths)}"')

cargoconfig = generate_cargo_config_toml(md)
with open(cargoconfig_path, 'w') as f:
	f.write(cargoconfig)

